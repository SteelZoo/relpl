# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - package
  - deploy

build:
  image: azul/zulu-openjdk:17-latest
  stage: build
  script:
    - cd ./BE/relpl
    - chmod +x ./gradlew
    - ./gradlew clean
    - ./gradlew build
  artifacts:
    paths:
      - ./BE/relpl/build/libs/*.jar
    expire_in: 10 min

package:
  image: docker:latest
  stage: package
  variables:
    IMAGE_NAME: vadeski/ksh-backend
  services:
    - name: docker:dind
      command: ["--privileged=true", "--tls=false"]
  before_script:
#    - cat ../DOCKER_TOKEN.txt | docker login --username $DOCKER_HUB_USER --password-stdin
#    - docker login -u $DOCKER_HUB_USER --password-stdin < $DOCKER_HUB_PW
    - echo "$DOCKER_HUB_PW" | docker login --username $DOCKER_HUB_USER --password-stdin
#    - echo "로그인 성공"
    #- cat $DOCKER_HUB_PW | docker login --username $DOCKER_HUB_USER --password-stdin
  script:
    - cd ./BE/relpl
    - docker buildx create --use --name mybuilder
    - docker buildx build --platform linux/amd64,linux/arm64 -t $IMAGE_NAME:$CI_PIPELINE_IID --push .
    - docker buildx build --platform linux/amd64,linux/arm64 -t $IMAGE_NAME:latest --push .
    - echo "build complete"
    # - docker build -t $IMAGE_NAME:$CI_PIPELINE_IID .
    # - docker build -t $IMAGE_NAME:latest .
    # - docker push $IMAGE_NAME:$CI_PIPELINE_IID
    # - docker push $IMAGE_NAME:latest
  after_script:
    - docker logout

deploy-was:
  stage: deploy
  variables:
    IMAGE_NAME: vadeski/ksh-backend
  tags:
    - ksh-runner
  before_script:
#    - docker login --username $DOCKER_HUB_USER --password-stdin < $DOCKER_HUB_PW
    - echo "$DOCKER_HUB_PW" | docker login --username $DOCKER_HUB_USER --password-stdin
    #- echo "$DOCKER_HUB_PW" | docker login --username  --password-stdin
  script:
    - docker stop ksh-backend || true
    - docker rm ksh-backend || true
    - docker rmi ksh-backend || true
    - docker pull $IMAGE_NAME:latest
    - docker run -d --restart always -e TZ=Asia/Seoul -p 8081:9090/tcp --name ksh-backend $IMAGE_NAME:latest
  after_script:
    - docker logout
  when: on_success
  only:
    - be/feat/cicd